// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2016 05:59:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_vlg_sample_tst(
	clk,
	pINPUT,
	rst,
	sampler_tx
);
input  clk;
input [7:0] pINPUT;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pINPUT or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_vlg_check_tst (
	LdOUTPUT,
	R1,
	R2,
	ResultULA,
	SelDesv,
	SelJMP,
	Wr,
	addR1,
	addR2,
	addRegWr,
	dadoMemoria,
	dadoWr,
	enderecoMemoria,
	estado,
	pOUTPUT,
	selDtWr,
	sampler_rx
);
input  LdOUTPUT;
input [7:0] R1;
input [7:0] R2;
input [7:0] ResultULA;
input  SelDesv;
input  SelJMP;
input  Wr;
input [2:0] addR1;
input [2:0] addR2;
input [2:0] addRegWr;
input [15:0] dadoMemoria;
input [7:0] dadoWr;
input [7:0] enderecoMemoria;
input [2:0] estado;
input [7:0] pOUTPUT;
input  selDtWr;
input sampler_rx;

reg  LdOUTPUT_expected;
reg [7:0] R1_expected;
reg [7:0] R2_expected;
reg [7:0] ResultULA_expected;
reg  SelDesv_expected;
reg  SelJMP_expected;
reg  Wr_expected;
reg [2:0] addR1_expected;
reg [2:0] addR2_expected;
reg [2:0] addRegWr_expected;
reg [15:0] dadoMemoria_expected;
reg [7:0] dadoWr_expected;
reg [7:0] enderecoMemoria_expected;
reg [2:0] estado_expected;
reg [7:0] pOUTPUT_expected;
reg  selDtWr_expected;

reg  LdOUTPUT_prev;
reg [7:0] R1_prev;
reg [7:0] R2_prev;
reg [7:0] ResultULA_prev;
reg  SelDesv_prev;
reg  SelJMP_prev;
reg  Wr_prev;
reg [2:0] addR1_prev;
reg [2:0] addR2_prev;
reg [2:0] addRegWr_prev;
reg [15:0] dadoMemoria_prev;
reg [7:0] dadoWr_prev;
reg [7:0] enderecoMemoria_prev;
reg [2:0] estado_prev;
reg [7:0] pOUTPUT_prev;
reg  selDtWr_prev;

reg  LdOUTPUT_expected_prev;
reg [7:0] R1_expected_prev;
reg [7:0] R2_expected_prev;
reg [7:0] ResultULA_expected_prev;
reg  SelDesv_expected_prev;
reg  SelJMP_expected_prev;
reg  Wr_expected_prev;
reg [2:0] addR1_expected_prev;
reg [2:0] addR2_expected_prev;
reg [2:0] addRegWr_expected_prev;
reg [15:0] dadoMemoria_expected_prev;
reg [7:0] dadoWr_expected_prev;
reg [7:0] enderecoMemoria_expected_prev;
reg [2:0] estado_expected_prev;
reg [7:0] pOUTPUT_expected_prev;
reg  selDtWr_expected_prev;

reg  last_LdOUTPUT_exp;
reg [7:0] last_R1_exp;
reg [7:0] last_R2_exp;
reg [7:0] last_ResultULA_exp;
reg  last_SelDesv_exp;
reg  last_SelJMP_exp;
reg  last_Wr_exp;
reg [2:0] last_addR1_exp;
reg [2:0] last_addR2_exp;
reg [2:0] last_addRegWr_exp;
reg [15:0] last_dadoMemoria_exp;
reg [7:0] last_dadoWr_exp;
reg [7:0] last_enderecoMemoria_exp;
reg [2:0] last_estado_exp;
reg [7:0] last_pOUTPUT_exp;
reg  last_selDtWr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	LdOUTPUT_prev = LdOUTPUT;
	R1_prev = R1;
	R2_prev = R2;
	ResultULA_prev = ResultULA;
	SelDesv_prev = SelDesv;
	SelJMP_prev = SelJMP;
	Wr_prev = Wr;
	addR1_prev = addR1;
	addR2_prev = addR2;
	addRegWr_prev = addRegWr;
	dadoMemoria_prev = dadoMemoria;
	dadoWr_prev = dadoWr;
	enderecoMemoria_prev = enderecoMemoria;
	estado_prev = estado;
	pOUTPUT_prev = pOUTPUT;
	selDtWr_prev = selDtWr;
end

// update expected /o prevs

always @(trigger)
begin
	LdOUTPUT_expected_prev = LdOUTPUT_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	ResultULA_expected_prev = ResultULA_expected;
	SelDesv_expected_prev = SelDesv_expected;
	SelJMP_expected_prev = SelJMP_expected;
	Wr_expected_prev = Wr_expected;
	addR1_expected_prev = addR1_expected;
	addR2_expected_prev = addR2_expected;
	addRegWr_expected_prev = addRegWr_expected;
	dadoMemoria_expected_prev = dadoMemoria_expected;
	dadoWr_expected_prev = dadoWr_expected;
	enderecoMemoria_expected_prev = enderecoMemoria_expected;
	estado_expected_prev = estado_expected;
	pOUTPUT_expected_prev = pOUTPUT_expected;
	selDtWr_expected_prev = selDtWr_expected;
end


// expected enderecoMemoria[ 7 ]
initial
begin
	enderecoMemoria_expected[7] = 1'bX;
end 
// expected enderecoMemoria[ 6 ]
initial
begin
	enderecoMemoria_expected[6] = 1'bX;
end 
// expected enderecoMemoria[ 5 ]
initial
begin
	enderecoMemoria_expected[5] = 1'bX;
end 
// expected enderecoMemoria[ 4 ]
initial
begin
	enderecoMemoria_expected[4] = 1'bX;
end 
// expected enderecoMemoria[ 3 ]
initial
begin
	enderecoMemoria_expected[3] = 1'bX;
end 
// expected enderecoMemoria[ 2 ]
initial
begin
	enderecoMemoria_expected[2] = 1'bX;
end 
// expected enderecoMemoria[ 1 ]
initial
begin
	enderecoMemoria_expected[1] = 1'bX;
end 
// expected enderecoMemoria[ 0 ]
initial
begin
	enderecoMemoria_expected[0] = 1'bX;
end 
// expected dadoMemoria[ 15 ]
initial
begin
	dadoMemoria_expected[15] = 1'bX;
end 
// expected dadoMemoria[ 14 ]
initial
begin
	dadoMemoria_expected[14] = 1'bX;
end 
// expected dadoMemoria[ 13 ]
initial
begin
	dadoMemoria_expected[13] = 1'bX;
end 
// expected dadoMemoria[ 12 ]
initial
begin
	dadoMemoria_expected[12] = 1'bX;
end 
// expected dadoMemoria[ 11 ]
initial
begin
	dadoMemoria_expected[11] = 1'bX;
end 
// expected dadoMemoria[ 10 ]
initial
begin
	dadoMemoria_expected[10] = 1'bX;
end 
// expected dadoMemoria[ 9 ]
initial
begin
	dadoMemoria_expected[9] = 1'bX;
end 
// expected dadoMemoria[ 8 ]
initial
begin
	dadoMemoria_expected[8] = 1'bX;
end 
// expected dadoMemoria[ 7 ]
initial
begin
	dadoMemoria_expected[7] = 1'bX;
end 
// expected dadoMemoria[ 6 ]
initial
begin
	dadoMemoria_expected[6] = 1'bX;
end 
// expected dadoMemoria[ 5 ]
initial
begin
	dadoMemoria_expected[5] = 1'bX;
end 
// expected dadoMemoria[ 4 ]
initial
begin
	dadoMemoria_expected[4] = 1'bX;
end 
// expected dadoMemoria[ 3 ]
initial
begin
	dadoMemoria_expected[3] = 1'bX;
end 
// expected dadoMemoria[ 2 ]
initial
begin
	dadoMemoria_expected[2] = 1'bX;
end 
// expected dadoMemoria[ 1 ]
initial
begin
	dadoMemoria_expected[1] = 1'bX;
end 
// expected dadoMemoria[ 0 ]
initial
begin
	dadoMemoria_expected[0] = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 
// expected addR1[ 2 ]
initial
begin
	addR1_expected[2] = 1'bX;
end 
// expected addR1[ 1 ]
initial
begin
	addR1_expected[1] = 1'bX;
end 
// expected addR1[ 0 ]
initial
begin
	addR1_expected[0] = 1'bX;
end 
// expected R1[ 7 ]
initial
begin
	R1_expected[7] = 1'bX;
end 
// expected R1[ 6 ]
initial
begin
	R1_expected[6] = 1'bX;
end 
// expected R1[ 5 ]
initial
begin
	R1_expected[5] = 1'bX;
end 
// expected R1[ 4 ]
initial
begin
	R1_expected[4] = 1'bX;
end 
// expected R1[ 3 ]
initial
begin
	R1_expected[3] = 1'bX;
end 
// expected R1[ 2 ]
initial
begin
	R1_expected[2] = 1'bX;
end 
// expected R1[ 1 ]
initial
begin
	R1_expected[1] = 1'bX;
end 
// expected R1[ 0 ]
initial
begin
	R1_expected[0] = 1'bX;
end 
// expected addR2[ 2 ]
initial
begin
	addR2_expected[2] = 1'bX;
end 
// expected addR2[ 1 ]
initial
begin
	addR2_expected[1] = 1'bX;
end 
// expected addR2[ 0 ]
initial
begin
	addR2_expected[0] = 1'bX;
end 
// expected R2[ 7 ]
initial
begin
	R2_expected[7] = 1'bX;
end 
// expected R2[ 6 ]
initial
begin
	R2_expected[6] = 1'bX;
end 
// expected R2[ 5 ]
initial
begin
	R2_expected[5] = 1'bX;
end 
// expected R2[ 4 ]
initial
begin
	R2_expected[4] = 1'bX;
end 
// expected R2[ 3 ]
initial
begin
	R2_expected[3] = 1'bX;
end 
// expected R2[ 2 ]
initial
begin
	R2_expected[2] = 1'bX;
end 
// expected R2[ 1 ]
initial
begin
	R2_expected[1] = 1'bX;
end 
// expected R2[ 0 ]
initial
begin
	R2_expected[0] = 1'bX;
end 

// expected Wr
initial
begin
	Wr_expected = 1'bX;
end 
// expected addRegWr[ 2 ]
initial
begin
	addRegWr_expected[2] = 1'bX;
end 
// expected addRegWr[ 1 ]
initial
begin
	addRegWr_expected[1] = 1'bX;
end 
// expected addRegWr[ 0 ]
initial
begin
	addRegWr_expected[0] = 1'bX;
end 
// expected dadoWr[ 7 ]
initial
begin
	dadoWr_expected[7] = 1'bX;
end 
// expected dadoWr[ 6 ]
initial
begin
	dadoWr_expected[6] = 1'bX;
end 
// expected dadoWr[ 5 ]
initial
begin
	dadoWr_expected[5] = 1'bX;
end 
// expected dadoWr[ 4 ]
initial
begin
	dadoWr_expected[4] = 1'bX;
end 
// expected dadoWr[ 3 ]
initial
begin
	dadoWr_expected[3] = 1'bX;
end 
// expected dadoWr[ 2 ]
initial
begin
	dadoWr_expected[2] = 1'bX;
end 
// expected dadoWr[ 1 ]
initial
begin
	dadoWr_expected[1] = 1'bX;
end 
// expected dadoWr[ 0 ]
initial
begin
	dadoWr_expected[0] = 1'bX;
end 

// expected SelDesv
initial
begin
	SelDesv_expected = 1'bX;
end 

// expected SelJMP
initial
begin
	SelJMP_expected = 1'bX;
end 

// expected selDtWr
initial
begin
	selDtWr_expected = 1'bX;
end 
// expected ResultULA[ 7 ]
initial
begin
	ResultULA_expected[7] = 1'bX;
end 
// expected ResultULA[ 6 ]
initial
begin
	ResultULA_expected[6] = 1'bX;
end 
// expected ResultULA[ 5 ]
initial
begin
	ResultULA_expected[5] = 1'bX;
end 
// expected ResultULA[ 4 ]
initial
begin
	ResultULA_expected[4] = 1'bX;
end 
// expected ResultULA[ 3 ]
initial
begin
	ResultULA_expected[3] = 1'bX;
end 
// expected ResultULA[ 2 ]
initial
begin
	ResultULA_expected[2] = 1'bX;
end 
// expected ResultULA[ 1 ]
initial
begin
	ResultULA_expected[1] = 1'bX;
end 
// expected ResultULA[ 0 ]
initial
begin
	ResultULA_expected[0] = 1'bX;
end 

// expected LdOUTPUT
initial
begin
	LdOUTPUT_expected = 1'bX;
end 
// expected pOUTPUT[ 7 ]
initial
begin
	pOUTPUT_expected[7] = 1'bX;
end 
// expected pOUTPUT[ 6 ]
initial
begin
	pOUTPUT_expected[6] = 1'bX;
end 
// expected pOUTPUT[ 5 ]
initial
begin
	pOUTPUT_expected[5] = 1'bX;
end 
// expected pOUTPUT[ 4 ]
initial
begin
	pOUTPUT_expected[4] = 1'bX;
end 
// expected pOUTPUT[ 3 ]
initial
begin
	pOUTPUT_expected[3] = 1'bX;
end 
// expected pOUTPUT[ 2 ]
initial
begin
	pOUTPUT_expected[2] = 1'bX;
end 
// expected pOUTPUT[ 1 ]
initial
begin
	pOUTPUT_expected[1] = 1'bX;
end 
// expected pOUTPUT[ 0 ]
initial
begin
	pOUTPUT_expected[0] = 1'bX;
end 
// generate trigger
always @(LdOUTPUT_expected or LdOUTPUT or R1_expected or R1 or R2_expected or R2 or ResultULA_expected or ResultULA or SelDesv_expected or SelDesv or SelJMP_expected or SelJMP or Wr_expected or Wr or addR1_expected or addR1 or addR2_expected or addR2 or addRegWr_expected or addRegWr or dadoMemoria_expected or dadoMemoria or dadoWr_expected or dadoWr or enderecoMemoria_expected or enderecoMemoria or estado_expected or estado or pOUTPUT_expected or pOUTPUT or selDtWr_expected or selDtWr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LdOUTPUT = %b | expected R1 = %b | expected R2 = %b | expected ResultULA = %b | expected SelDesv = %b | expected SelJMP = %b | expected Wr = %b | expected addR1 = %b | expected addR2 = %b | expected addRegWr = %b | expected dadoMemoria = %b | expected dadoWr = %b | expected enderecoMemoria = %b | expected estado = %b | expected pOUTPUT = %b | expected selDtWr = %b | ",LdOUTPUT_expected_prev,R1_expected_prev,R2_expected_prev,ResultULA_expected_prev,SelDesv_expected_prev,SelJMP_expected_prev,Wr_expected_prev,addR1_expected_prev,addR2_expected_prev,addRegWr_expected_prev,dadoMemoria_expected_prev,dadoWr_expected_prev,enderecoMemoria_expected_prev,estado_expected_prev,pOUTPUT_expected_prev,selDtWr_expected_prev);
	$display("| real LdOUTPUT = %b | real R1 = %b | real R2 = %b | real ResultULA = %b | real SelDesv = %b | real SelJMP = %b | real Wr = %b | real addR1 = %b | real addR2 = %b | real addRegWr = %b | real dadoMemoria = %b | real dadoWr = %b | real enderecoMemoria = %b | real estado = %b | real pOUTPUT = %b | real selDtWr = %b | ",LdOUTPUT_prev,R1_prev,R2_prev,ResultULA_prev,SelDesv_prev,SelJMP_prev,Wr_prev,addR1_prev,addR2_prev,addRegWr_prev,dadoMemoria_prev,dadoWr_prev,enderecoMemoria_prev,estado_prev,pOUTPUT_prev,selDtWr_prev);
`endif
	if (
		( LdOUTPUT_expected_prev !== 1'bx ) && ( LdOUTPUT_prev !== LdOUTPUT_expected_prev )
		&& ((LdOUTPUT_expected_prev !== last_LdOUTPUT_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LdOUTPUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LdOUTPUT_expected_prev);
		$display ("     Real value = %b", LdOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LdOUTPUT_exp = LdOUTPUT_expected_prev;
	end
	if (
		( R1_expected_prev[0] !== 1'bx ) && ( R1_prev[0] !== R1_expected_prev[0] )
		&& ((R1_expected_prev[0] !== last_R1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[0] = R1_expected_prev[0];
	end
	if (
		( R1_expected_prev[1] !== 1'bx ) && ( R1_prev[1] !== R1_expected_prev[1] )
		&& ((R1_expected_prev[1] !== last_R1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[1] = R1_expected_prev[1];
	end
	if (
		( R1_expected_prev[2] !== 1'bx ) && ( R1_prev[2] !== R1_expected_prev[2] )
		&& ((R1_expected_prev[2] !== last_R1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[2] = R1_expected_prev[2];
	end
	if (
		( R1_expected_prev[3] !== 1'bx ) && ( R1_prev[3] !== R1_expected_prev[3] )
		&& ((R1_expected_prev[3] !== last_R1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[3] = R1_expected_prev[3];
	end
	if (
		( R1_expected_prev[4] !== 1'bx ) && ( R1_prev[4] !== R1_expected_prev[4] )
		&& ((R1_expected_prev[4] !== last_R1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[4] = R1_expected_prev[4];
	end
	if (
		( R1_expected_prev[5] !== 1'bx ) && ( R1_prev[5] !== R1_expected_prev[5] )
		&& ((R1_expected_prev[5] !== last_R1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[5] = R1_expected_prev[5];
	end
	if (
		( R1_expected_prev[6] !== 1'bx ) && ( R1_prev[6] !== R1_expected_prev[6] )
		&& ((R1_expected_prev[6] !== last_R1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[6] = R1_expected_prev[6];
	end
	if (
		( R1_expected_prev[7] !== 1'bx ) && ( R1_prev[7] !== R1_expected_prev[7] )
		&& ((R1_expected_prev[7] !== last_R1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_R1_exp[7] = R1_expected_prev[7];
	end
	if (
		( R2_expected_prev[0] !== 1'bx ) && ( R2_prev[0] !== R2_expected_prev[0] )
		&& ((R2_expected_prev[0] !== last_R2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[0] = R2_expected_prev[0];
	end
	if (
		( R2_expected_prev[1] !== 1'bx ) && ( R2_prev[1] !== R2_expected_prev[1] )
		&& ((R2_expected_prev[1] !== last_R2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[1] = R2_expected_prev[1];
	end
	if (
		( R2_expected_prev[2] !== 1'bx ) && ( R2_prev[2] !== R2_expected_prev[2] )
		&& ((R2_expected_prev[2] !== last_R2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[2] = R2_expected_prev[2];
	end
	if (
		( R2_expected_prev[3] !== 1'bx ) && ( R2_prev[3] !== R2_expected_prev[3] )
		&& ((R2_expected_prev[3] !== last_R2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[3] = R2_expected_prev[3];
	end
	if (
		( R2_expected_prev[4] !== 1'bx ) && ( R2_prev[4] !== R2_expected_prev[4] )
		&& ((R2_expected_prev[4] !== last_R2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[4] = R2_expected_prev[4];
	end
	if (
		( R2_expected_prev[5] !== 1'bx ) && ( R2_prev[5] !== R2_expected_prev[5] )
		&& ((R2_expected_prev[5] !== last_R2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[5] = R2_expected_prev[5];
	end
	if (
		( R2_expected_prev[6] !== 1'bx ) && ( R2_prev[6] !== R2_expected_prev[6] )
		&& ((R2_expected_prev[6] !== last_R2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[6] = R2_expected_prev[6];
	end
	if (
		( R2_expected_prev[7] !== 1'bx ) && ( R2_prev[7] !== R2_expected_prev[7] )
		&& ((R2_expected_prev[7] !== last_R2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R2_exp[7] = R2_expected_prev[7];
	end
	if (
		( ResultULA_expected_prev[0] !== 1'bx ) && ( ResultULA_prev[0] !== ResultULA_expected_prev[0] )
		&& ((ResultULA_expected_prev[0] !== last_ResultULA_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[0] = ResultULA_expected_prev[0];
	end
	if (
		( ResultULA_expected_prev[1] !== 1'bx ) && ( ResultULA_prev[1] !== ResultULA_expected_prev[1] )
		&& ((ResultULA_expected_prev[1] !== last_ResultULA_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[1] = ResultULA_expected_prev[1];
	end
	if (
		( ResultULA_expected_prev[2] !== 1'bx ) && ( ResultULA_prev[2] !== ResultULA_expected_prev[2] )
		&& ((ResultULA_expected_prev[2] !== last_ResultULA_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[2] = ResultULA_expected_prev[2];
	end
	if (
		( ResultULA_expected_prev[3] !== 1'bx ) && ( ResultULA_prev[3] !== ResultULA_expected_prev[3] )
		&& ((ResultULA_expected_prev[3] !== last_ResultULA_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[3] = ResultULA_expected_prev[3];
	end
	if (
		( ResultULA_expected_prev[4] !== 1'bx ) && ( ResultULA_prev[4] !== ResultULA_expected_prev[4] )
		&& ((ResultULA_expected_prev[4] !== last_ResultULA_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[4] = ResultULA_expected_prev[4];
	end
	if (
		( ResultULA_expected_prev[5] !== 1'bx ) && ( ResultULA_prev[5] !== ResultULA_expected_prev[5] )
		&& ((ResultULA_expected_prev[5] !== last_ResultULA_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[5] = ResultULA_expected_prev[5];
	end
	if (
		( ResultULA_expected_prev[6] !== 1'bx ) && ( ResultULA_prev[6] !== ResultULA_expected_prev[6] )
		&& ((ResultULA_expected_prev[6] !== last_ResultULA_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[6] = ResultULA_expected_prev[6];
	end
	if (
		( ResultULA_expected_prev[7] !== 1'bx ) && ( ResultULA_prev[7] !== ResultULA_expected_prev[7] )
		&& ((ResultULA_expected_prev[7] !== last_ResultULA_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResultULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResultULA_expected_prev);
		$display ("     Real value = %b", ResultULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ResultULA_exp[7] = ResultULA_expected_prev[7];
	end
	if (
		( SelDesv_expected_prev !== 1'bx ) && ( SelDesv_prev !== SelDesv_expected_prev )
		&& ((SelDesv_expected_prev !== last_SelDesv_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SelDesv :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SelDesv_expected_prev);
		$display ("     Real value = %b", SelDesv_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SelDesv_exp = SelDesv_expected_prev;
	end
	if (
		( SelJMP_expected_prev !== 1'bx ) && ( SelJMP_prev !== SelJMP_expected_prev )
		&& ((SelJMP_expected_prev !== last_SelJMP_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SelJMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SelJMP_expected_prev);
		$display ("     Real value = %b", SelJMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SelJMP_exp = SelJMP_expected_prev;
	end
	if (
		( Wr_expected_prev !== 1'bx ) && ( Wr_prev !== Wr_expected_prev )
		&& ((Wr_expected_prev !== last_Wr_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Wr_expected_prev);
		$display ("     Real value = %b", Wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Wr_exp = Wr_expected_prev;
	end
	if (
		( addR1_expected_prev[0] !== 1'bx ) && ( addR1_prev[0] !== addR1_expected_prev[0] )
		&& ((addR1_expected_prev[0] !== last_addR1_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR1_expected_prev);
		$display ("     Real value = %b", addR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_addR1_exp[0] = addR1_expected_prev[0];
	end
	if (
		( addR1_expected_prev[1] !== 1'bx ) && ( addR1_prev[1] !== addR1_expected_prev[1] )
		&& ((addR1_expected_prev[1] !== last_addR1_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR1_expected_prev);
		$display ("     Real value = %b", addR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_addR1_exp[1] = addR1_expected_prev[1];
	end
	if (
		( addR1_expected_prev[2] !== 1'bx ) && ( addR1_prev[2] !== addR1_expected_prev[2] )
		&& ((addR1_expected_prev[2] !== last_addR1_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR1_expected_prev);
		$display ("     Real value = %b", addR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_addR1_exp[2] = addR1_expected_prev[2];
	end
	if (
		( addR2_expected_prev[0] !== 1'bx ) && ( addR2_prev[0] !== addR2_expected_prev[0] )
		&& ((addR2_expected_prev[0] !== last_addR2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR2_expected_prev);
		$display ("     Real value = %b", addR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_addR2_exp[0] = addR2_expected_prev[0];
	end
	if (
		( addR2_expected_prev[1] !== 1'bx ) && ( addR2_prev[1] !== addR2_expected_prev[1] )
		&& ((addR2_expected_prev[1] !== last_addR2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR2_expected_prev);
		$display ("     Real value = %b", addR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_addR2_exp[1] = addR2_expected_prev[1];
	end
	if (
		( addR2_expected_prev[2] !== 1'bx ) && ( addR2_prev[2] !== addR2_expected_prev[2] )
		&& ((addR2_expected_prev[2] !== last_addR2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addR2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addR2_expected_prev);
		$display ("     Real value = %b", addR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_addR2_exp[2] = addR2_expected_prev[2];
	end
	if (
		( addRegWr_expected_prev[0] !== 1'bx ) && ( addRegWr_prev[0] !== addRegWr_expected_prev[0] )
		&& ((addRegWr_expected_prev[0] !== last_addRegWr_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addRegWr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addRegWr_expected_prev);
		$display ("     Real value = %b", addRegWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_addRegWr_exp[0] = addRegWr_expected_prev[0];
	end
	if (
		( addRegWr_expected_prev[1] !== 1'bx ) && ( addRegWr_prev[1] !== addRegWr_expected_prev[1] )
		&& ((addRegWr_expected_prev[1] !== last_addRegWr_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addRegWr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addRegWr_expected_prev);
		$display ("     Real value = %b", addRegWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_addRegWr_exp[1] = addRegWr_expected_prev[1];
	end
	if (
		( addRegWr_expected_prev[2] !== 1'bx ) && ( addRegWr_prev[2] !== addRegWr_expected_prev[2] )
		&& ((addRegWr_expected_prev[2] !== last_addRegWr_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addRegWr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addRegWr_expected_prev);
		$display ("     Real value = %b", addRegWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_addRegWr_exp[2] = addRegWr_expected_prev[2];
	end
	if (
		( dadoMemoria_expected_prev[0] !== 1'bx ) && ( dadoMemoria_prev[0] !== dadoMemoria_expected_prev[0] )
		&& ((dadoMemoria_expected_prev[0] !== last_dadoMemoria_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[0] = dadoMemoria_expected_prev[0];
	end
	if (
		( dadoMemoria_expected_prev[1] !== 1'bx ) && ( dadoMemoria_prev[1] !== dadoMemoria_expected_prev[1] )
		&& ((dadoMemoria_expected_prev[1] !== last_dadoMemoria_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[1] = dadoMemoria_expected_prev[1];
	end
	if (
		( dadoMemoria_expected_prev[2] !== 1'bx ) && ( dadoMemoria_prev[2] !== dadoMemoria_expected_prev[2] )
		&& ((dadoMemoria_expected_prev[2] !== last_dadoMemoria_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[2] = dadoMemoria_expected_prev[2];
	end
	if (
		( dadoMemoria_expected_prev[3] !== 1'bx ) && ( dadoMemoria_prev[3] !== dadoMemoria_expected_prev[3] )
		&& ((dadoMemoria_expected_prev[3] !== last_dadoMemoria_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[3] = dadoMemoria_expected_prev[3];
	end
	if (
		( dadoMemoria_expected_prev[4] !== 1'bx ) && ( dadoMemoria_prev[4] !== dadoMemoria_expected_prev[4] )
		&& ((dadoMemoria_expected_prev[4] !== last_dadoMemoria_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[4] = dadoMemoria_expected_prev[4];
	end
	if (
		( dadoMemoria_expected_prev[5] !== 1'bx ) && ( dadoMemoria_prev[5] !== dadoMemoria_expected_prev[5] )
		&& ((dadoMemoria_expected_prev[5] !== last_dadoMemoria_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[5] = dadoMemoria_expected_prev[5];
	end
	if (
		( dadoMemoria_expected_prev[6] !== 1'bx ) && ( dadoMemoria_prev[6] !== dadoMemoria_expected_prev[6] )
		&& ((dadoMemoria_expected_prev[6] !== last_dadoMemoria_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[6] = dadoMemoria_expected_prev[6];
	end
	if (
		( dadoMemoria_expected_prev[7] !== 1'bx ) && ( dadoMemoria_prev[7] !== dadoMemoria_expected_prev[7] )
		&& ((dadoMemoria_expected_prev[7] !== last_dadoMemoria_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[7] = dadoMemoria_expected_prev[7];
	end
	if (
		( dadoMemoria_expected_prev[8] !== 1'bx ) && ( dadoMemoria_prev[8] !== dadoMemoria_expected_prev[8] )
		&& ((dadoMemoria_expected_prev[8] !== last_dadoMemoria_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[8] = dadoMemoria_expected_prev[8];
	end
	if (
		( dadoMemoria_expected_prev[9] !== 1'bx ) && ( dadoMemoria_prev[9] !== dadoMemoria_expected_prev[9] )
		&& ((dadoMemoria_expected_prev[9] !== last_dadoMemoria_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[9] = dadoMemoria_expected_prev[9];
	end
	if (
		( dadoMemoria_expected_prev[10] !== 1'bx ) && ( dadoMemoria_prev[10] !== dadoMemoria_expected_prev[10] )
		&& ((dadoMemoria_expected_prev[10] !== last_dadoMemoria_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[10] = dadoMemoria_expected_prev[10];
	end
	if (
		( dadoMemoria_expected_prev[11] !== 1'bx ) && ( dadoMemoria_prev[11] !== dadoMemoria_expected_prev[11] )
		&& ((dadoMemoria_expected_prev[11] !== last_dadoMemoria_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[11] = dadoMemoria_expected_prev[11];
	end
	if (
		( dadoMemoria_expected_prev[12] !== 1'bx ) && ( dadoMemoria_prev[12] !== dadoMemoria_expected_prev[12] )
		&& ((dadoMemoria_expected_prev[12] !== last_dadoMemoria_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[12] = dadoMemoria_expected_prev[12];
	end
	if (
		( dadoMemoria_expected_prev[13] !== 1'bx ) && ( dadoMemoria_prev[13] !== dadoMemoria_expected_prev[13] )
		&& ((dadoMemoria_expected_prev[13] !== last_dadoMemoria_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[13] = dadoMemoria_expected_prev[13];
	end
	if (
		( dadoMemoria_expected_prev[14] !== 1'bx ) && ( dadoMemoria_prev[14] !== dadoMemoria_expected_prev[14] )
		&& ((dadoMemoria_expected_prev[14] !== last_dadoMemoria_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[14] = dadoMemoria_expected_prev[14];
	end
	if (
		( dadoMemoria_expected_prev[15] !== 1'bx ) && ( dadoMemoria_prev[15] !== dadoMemoria_expected_prev[15] )
		&& ((dadoMemoria_expected_prev[15] !== last_dadoMemoria_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoMemoria[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoMemoria_expected_prev);
		$display ("     Real value = %b", dadoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_dadoMemoria_exp[15] = dadoMemoria_expected_prev[15];
	end
	if (
		( dadoWr_expected_prev[0] !== 1'bx ) && ( dadoWr_prev[0] !== dadoWr_expected_prev[0] )
		&& ((dadoWr_expected_prev[0] !== last_dadoWr_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[0] = dadoWr_expected_prev[0];
	end
	if (
		( dadoWr_expected_prev[1] !== 1'bx ) && ( dadoWr_prev[1] !== dadoWr_expected_prev[1] )
		&& ((dadoWr_expected_prev[1] !== last_dadoWr_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[1] = dadoWr_expected_prev[1];
	end
	if (
		( dadoWr_expected_prev[2] !== 1'bx ) && ( dadoWr_prev[2] !== dadoWr_expected_prev[2] )
		&& ((dadoWr_expected_prev[2] !== last_dadoWr_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[2] = dadoWr_expected_prev[2];
	end
	if (
		( dadoWr_expected_prev[3] !== 1'bx ) && ( dadoWr_prev[3] !== dadoWr_expected_prev[3] )
		&& ((dadoWr_expected_prev[3] !== last_dadoWr_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[3] = dadoWr_expected_prev[3];
	end
	if (
		( dadoWr_expected_prev[4] !== 1'bx ) && ( dadoWr_prev[4] !== dadoWr_expected_prev[4] )
		&& ((dadoWr_expected_prev[4] !== last_dadoWr_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[4] = dadoWr_expected_prev[4];
	end
	if (
		( dadoWr_expected_prev[5] !== 1'bx ) && ( dadoWr_prev[5] !== dadoWr_expected_prev[5] )
		&& ((dadoWr_expected_prev[5] !== last_dadoWr_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[5] = dadoWr_expected_prev[5];
	end
	if (
		( dadoWr_expected_prev[6] !== 1'bx ) && ( dadoWr_prev[6] !== dadoWr_expected_prev[6] )
		&& ((dadoWr_expected_prev[6] !== last_dadoWr_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[6] = dadoWr_expected_prev[6];
	end
	if (
		( dadoWr_expected_prev[7] !== 1'bx ) && ( dadoWr_prev[7] !== dadoWr_expected_prev[7] )
		&& ((dadoWr_expected_prev[7] !== last_dadoWr_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dadoWr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dadoWr_expected_prev);
		$display ("     Real value = %b", dadoWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_dadoWr_exp[7] = dadoWr_expected_prev[7];
	end
	if (
		( enderecoMemoria_expected_prev[0] !== 1'bx ) && ( enderecoMemoria_prev[0] !== enderecoMemoria_expected_prev[0] )
		&& ((enderecoMemoria_expected_prev[0] !== last_enderecoMemoria_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[0] = enderecoMemoria_expected_prev[0];
	end
	if (
		( enderecoMemoria_expected_prev[1] !== 1'bx ) && ( enderecoMemoria_prev[1] !== enderecoMemoria_expected_prev[1] )
		&& ((enderecoMemoria_expected_prev[1] !== last_enderecoMemoria_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[1] = enderecoMemoria_expected_prev[1];
	end
	if (
		( enderecoMemoria_expected_prev[2] !== 1'bx ) && ( enderecoMemoria_prev[2] !== enderecoMemoria_expected_prev[2] )
		&& ((enderecoMemoria_expected_prev[2] !== last_enderecoMemoria_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[2] = enderecoMemoria_expected_prev[2];
	end
	if (
		( enderecoMemoria_expected_prev[3] !== 1'bx ) && ( enderecoMemoria_prev[3] !== enderecoMemoria_expected_prev[3] )
		&& ((enderecoMemoria_expected_prev[3] !== last_enderecoMemoria_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[3] = enderecoMemoria_expected_prev[3];
	end
	if (
		( enderecoMemoria_expected_prev[4] !== 1'bx ) && ( enderecoMemoria_prev[4] !== enderecoMemoria_expected_prev[4] )
		&& ((enderecoMemoria_expected_prev[4] !== last_enderecoMemoria_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[4] = enderecoMemoria_expected_prev[4];
	end
	if (
		( enderecoMemoria_expected_prev[5] !== 1'bx ) && ( enderecoMemoria_prev[5] !== enderecoMemoria_expected_prev[5] )
		&& ((enderecoMemoria_expected_prev[5] !== last_enderecoMemoria_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[5] = enderecoMemoria_expected_prev[5];
	end
	if (
		( enderecoMemoria_expected_prev[6] !== 1'bx ) && ( enderecoMemoria_prev[6] !== enderecoMemoria_expected_prev[6] )
		&& ((enderecoMemoria_expected_prev[6] !== last_enderecoMemoria_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[6] = enderecoMemoria_expected_prev[6];
	end
	if (
		( enderecoMemoria_expected_prev[7] !== 1'bx ) && ( enderecoMemoria_prev[7] !== enderecoMemoria_expected_prev[7] )
		&& ((enderecoMemoria_expected_prev[7] !== last_enderecoMemoria_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enderecoMemoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enderecoMemoria_expected_prev);
		$display ("     Real value = %b", enderecoMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_enderecoMemoria_exp[7] = enderecoMemoria_expected_prev[7];
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( pOUTPUT_expected_prev[0] !== 1'bx ) && ( pOUTPUT_prev[0] !== pOUTPUT_expected_prev[0] )
		&& ((pOUTPUT_expected_prev[0] !== last_pOUTPUT_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[0] = pOUTPUT_expected_prev[0];
	end
	if (
		( pOUTPUT_expected_prev[1] !== 1'bx ) && ( pOUTPUT_prev[1] !== pOUTPUT_expected_prev[1] )
		&& ((pOUTPUT_expected_prev[1] !== last_pOUTPUT_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[1] = pOUTPUT_expected_prev[1];
	end
	if (
		( pOUTPUT_expected_prev[2] !== 1'bx ) && ( pOUTPUT_prev[2] !== pOUTPUT_expected_prev[2] )
		&& ((pOUTPUT_expected_prev[2] !== last_pOUTPUT_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[2] = pOUTPUT_expected_prev[2];
	end
	if (
		( pOUTPUT_expected_prev[3] !== 1'bx ) && ( pOUTPUT_prev[3] !== pOUTPUT_expected_prev[3] )
		&& ((pOUTPUT_expected_prev[3] !== last_pOUTPUT_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[3] = pOUTPUT_expected_prev[3];
	end
	if (
		( pOUTPUT_expected_prev[4] !== 1'bx ) && ( pOUTPUT_prev[4] !== pOUTPUT_expected_prev[4] )
		&& ((pOUTPUT_expected_prev[4] !== last_pOUTPUT_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[4] = pOUTPUT_expected_prev[4];
	end
	if (
		( pOUTPUT_expected_prev[5] !== 1'bx ) && ( pOUTPUT_prev[5] !== pOUTPUT_expected_prev[5] )
		&& ((pOUTPUT_expected_prev[5] !== last_pOUTPUT_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[5] = pOUTPUT_expected_prev[5];
	end
	if (
		( pOUTPUT_expected_prev[6] !== 1'bx ) && ( pOUTPUT_prev[6] !== pOUTPUT_expected_prev[6] )
		&& ((pOUTPUT_expected_prev[6] !== last_pOUTPUT_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[6] = pOUTPUT_expected_prev[6];
	end
	if (
		( pOUTPUT_expected_prev[7] !== 1'bx ) && ( pOUTPUT_prev[7] !== pOUTPUT_expected_prev[7] )
		&& ((pOUTPUT_expected_prev[7] !== last_pOUTPUT_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pOUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pOUTPUT_expected_prev);
		$display ("     Real value = %b", pOUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_pOUTPUT_exp[7] = pOUTPUT_expected_prev[7];
	end
	if (
		( selDtWr_expected_prev !== 1'bx ) && ( selDtWr_prev !== selDtWr_expected_prev )
		&& ((selDtWr_expected_prev !== last_selDtWr_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selDtWr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selDtWr_expected_prev);
		$display ("     Real value = %b", selDtWr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_selDtWr_exp = selDtWr_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] pINPUT;
reg rst;
// wires                                               
wire LdOUTPUT;
wire [7:0] R1;
wire [7:0] R2;
wire [7:0] ResultULA;
wire SelDesv;
wire SelJMP;
wire Wr;
wire [2:0] addR1;
wire [2:0] addR2;
wire [2:0] addRegWr;
wire [15:0] dadoMemoria;
wire [7:0] dadoWr;
wire [7:0] enderecoMemoria;
wire [2:0] estado;
wire [7:0] pOUTPUT;
wire selDtWr;

wire sampler;                             

// assign statements (if any)                          
processador i1 (
// port map - connection between master ports and signals/registers   
	.LdOUTPUT(LdOUTPUT),
	.R1(R1),
	.R2(R2),
	.ResultULA(ResultULA),
	.SelDesv(SelDesv),
	.SelJMP(SelJMP),
	.Wr(Wr),
	.addR1(addR1),
	.addR2(addR2),
	.addRegWr(addRegWr),
	.clk(clk),
	.dadoMemoria(dadoMemoria),
	.dadoWr(dadoWr),
	.enderecoMemoria(enderecoMemoria),
	.estado(estado),
	.pINPUT(pINPUT),
	.pOUTPUT(pOUTPUT),
	.rst(rst),
	.selDtWr(selDtWr)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #20000 1'b1;
end 

processador_vlg_sample_tst tb_sample (
	.clk(clk),
	.pINPUT(pINPUT),
	.rst(rst),
	.sampler_tx(sampler)
);

processador_vlg_check_tst tb_out(
	.LdOUTPUT(LdOUTPUT),
	.R1(R1),
	.R2(R2),
	.ResultULA(ResultULA),
	.SelDesv(SelDesv),
	.SelJMP(SelJMP),
	.Wr(Wr),
	.addR1(addR1),
	.addR2(addR2),
	.addRegWr(addRegWr),
	.dadoMemoria(dadoMemoria),
	.dadoWr(dadoWr),
	.enderecoMemoria(enderecoMemoria),
	.estado(estado),
	.pOUTPUT(pOUTPUT),
	.selDtWr(selDtWr),
	.sampler_rx(sampler)
);
endmodule

